USE demog;

DROP TABLE aux_doba;
CREATE TABLE aux_doba LIKE aux_do;

CALL PROC_AUX_DO('ba');
SELECT * FROM tmptable;

SHOW CREATE TABLE aux_do;


CREATE TABLE `aux_do` (
  `index` int NOT NULL AUTO_INCREMENT,
  `DTOBITO` text,
  `DTNASC` text,
  `IDADE` text,
  `ANOORIGEM` int NOT NULL,
  `CONT` int NOT NULL,
  PRIMARY KEY (`index`),
  UNIQUE KEY `uc_origem_cont` (`ANOORIGEM`,`CONT`)
);


CREATE TABLE `aux_date` (
  `index` int NOT NULL AUTO_INCREMENT,
  `DTOBITO` text,
  `DTNASC` text,
  `IDADE` text,
  `ANOORIGEM` int NOT NULL,
  `CONT` int NOT NULL,
  `DATAOBITO` date DEFAULT NULL,
  `DATANASC` date DEFAULT NULL,
  `DATADIFF` double DEFAULT NULL,
  `IDADECONVERT` double DEFAULT NULL,
  `SEXO` int DEFAULT NULL,
  PRIMARY KEY (`index`),
  UNIQUE KEY `uc_origem_cont` (`ANOORIGEM`,`CONT`)
);

CREATE TABLE aux_dtba LIKE aux_date;
CREATE TABLE aux_dtrn LIKE aux_date;

INSERT INTO aux_dtba (DTOBITO, DTNASC, IDADE, ANOORIGEM, CONT, SEXO) 
	SELECT DTOBITO, DTNASC, IDADE, ANOORIGEM, CONT, SEXO 
    FROM aux_doba 
    ORDER BY `index`;


INSERT INTO aux_dtrn (DTOBITO, DTNASC, IDADE, ANOORIGEM, CONT, SEXO) 
	SELECT DTOBITO, DTNASC, IDADE, ANOORIGEM, CONT, SEXO 
    FROM aux_dorn 
    ORDER BY `index`;
    
    
UPDATE aux_dtba 
	SET DATAOBITO = FUNC_STRING_TO_DATE(DTOBITO),
		DATANASC = FUNC_STRING_TO_DATE(DTNASC),
        DATADIFF = DATEDIFF(DATAOBITO, DATANASC) / 365,
        IDADECONVERT = FUNC_DECODE_IDADE(IDADE);

UPDATE aux_dtrn 
	SET DATAOBITO = FUNC_STRING_TO_DATE(DTOBITO),
		DATANASC = FUNC_STRING_TO_DATE(DTNASC),
        DATADIFF = DATEDIFF(DATAOBITO, DATANASC) / 365,
        IDADECONVERT = FUNC_DECODE_IDADE(IDADE);

DROP TABLE LEXISBA;
CREATE TABLE LEXISBA
SELECT 
	`index`, 
	CONT, 
	ANOORIGEM ANOBITO, 
    YEAR(DATANASC) COORTE, 
    FLOOR(DATADIFF) ANOSCOMPDIFF, 
    FLOOR(IDADECONVERT) ANOSCOMPCONVERT 
		FROM aux_dtba;


DROP TABLE IF EXISTS LEXISRN;
CREATE TABLE LEXISRN
SELECT 
	`index`, 
	CONT, 
	ANOORIGEM ANOBITO, 
    YEAR(DATANASC) COORTE, 
    FLOOR(DATADIFF) ANOSCOMPDIFF, 
    FLOOR(IDADECONVERT) ANOSCOMPCONVERT 
		FROM aux_dtrn;
       
       
CREATE TABLE morte_2000_2021_menor_5_rn
SELECT COORTE, COUNT(*) 
	FROM LEXISRN
    WHERE COORTE IS NOT NULL 
		AND COORTE >= 2000 AND COORTE <= 2016
        AND ANOSCOMPCONVERT < 5
	GROUP BY COORTE
    ORDER BY COORTE
    ;
    
-- CREATE TABLE morte_2000_2021_menor_5_ba 
SELECT COORTE, COUNT(*) 
	FROM LEXISBA
    WHERE COORTE IS NOT NULL 
		AND COORTE >= 2000 AND COORTE <= 2016
        AND ANOSCOMPCONVERT < 5
	GROUP BY COORTE
    ORDER BY COORTE
    ;
    
SELECT ANORIGEM COORTE, COUNT(*) FROM aux_dnba GROUP BY COORTE;

-- OBITOS RN
SELECT  COUNT(*) OBITOS 
	FROM LEXISRN
    WHERE COORTE IS NOT NULL 
		AND COORTE >= 2000 AND COORTE <= 2016
        AND ANOSCOMPCONVERT < 5;    

-- NASCIMENTOS RN
SELECT SUM(CONT) NASCIMENTOS
	FROM aux_dnrn_count
	WHERE YEAR(ANOCORR) BETWEEN 2000 AND 2016 ;

SELECT rate.OBITOS / rate.NASCIMENTOS p
FROM (SELECT 1 id,  COUNT(*) OBITOS 
	FROM LEXISRN
    WHERE COORTE IS NOT NULL 
		AND COORTE >= 2000 AND COORTE <= 2016
        AND ANOSCOMPCONVERT < 5
UNION ALL

SELECT 1 id, SUM(CONT) NASCIMENTOS
	FROM aux_dnrn_count
	WHERE YEAR(ANOCORR) BETWEEN 2000 AND 2016 ) rate;

SELECT ob.OBITOS / nasc.NASCIMENTOS pmorrer, 1 - (ob.OBITOS / nasc.NASCIMENTOS) psob
FROM (SELECT 1 id,  COUNT(*) OBITOS 
	FROM LEXISRN
    WHERE COORTE IS NOT NULL 
		AND COORTE >= 2000 AND COORTE <= 2016
        AND ANOSCOMPCONVERT < 5) ob
        INNER JOIN 
(SELECT 1 id, SUM(CONT) NASCIMENTOS
	FROM aux_dnrn_count
	WHERE YEAR(ANOCORR) BETWEEN 2000 AND 2016 ) nasc;
   
SELECT ob.OBITOS / nasc.NASCIMENTOS pmorrer, 1 - (ob.OBITOS / nasc.NASCIMENTOS) psob
FROM (SELECT 1 id,  COUNT(*) OBITOS 
	FROM LEXISRN
    WHERE COORTE IS NOT NULL 
		AND COORTE >= 2000 AND COORTE <= 2020
        AND ANOSCOMPCONVERT < 1) ob
        INNER JOIN 
(SELECT 1 id, SUM(CONT) NASCIMENTOS
	FROM aux_dnrn_count
	WHERE YEAR(ANOCORR) BETWEEN 2000 AND 2020 ) nasc;
    
    
    
SELECT ob.OBITOS / nasc.NASCIMENTOS pmorrer, 1 - (ob.OBITOS / nasc.NASCIMENTOS) psob
FROM (SELECT 1 id,  COUNT(*) OBITOS 
	FROM LEXISBA
    WHERE COORTE IS NOT NULL 
		AND COORTE >= 2000 AND COORTE <= 2016
        AND ANOSCOMPCONVERT < 5) ob
        INNER JOIN 
(SELECT 1 id, SUM(CONT) NASCIMENTOS
	FROM aux_dnba_count
	WHERE YEAR(ANOCORR) BETWEEN 2000 AND 2016 ) nasc

UNION ALL
   
SELECT ob.OBITOS / nasc.NASCIMENTOS pmorrer, 1 - (ob.OBITOS / nasc.NASCIMENTOS) psob
FROM (SELECT 1 id,  COUNT(*) OBITOS 
	FROM LEXISBA
    WHERE COORTE IS NOT NULL 
		AND COORTE >= 2000 AND COORTE <= 2020
        AND ANOSCOMPCONVERT < 1) ob
        INNER JOIN 
(SELECT 1 id, SUM(CONT) NASCIMENTOS
	FROM aux_dnba_count
	WHERE YEAR(ANOCORR) BETWEEN 2000 AND 2020 ) nasc;
    
    
SELECT  "OBITOS BA",COUNT(*) 
	FROM LEXISBA
    WHERE COORTE IS NOT NULL 
		AND COORTE >= 2000 AND COORTE <= 2016
        AND ANOSCOMPCONVERT < 5; 
        
SELECT "NASC BA", SUM(CONT)
	FROM aux_dnba_count
	WHERE YEAR(ANOCORR) BETWEEN 2000 AND 2016 ;
    
SELECT 
    ANOBITO,
    COORTE,
    ANOSCOMPDIFF,
    COUNT(*) `COUNT`
	FROM LEXISBA
	WHERE COORTE = 2010
	GROUP BY ANOBITO, COORTE, ANOSCOMPDIFF
	ORDER BY  ANOBITO, COORTE, ANOSCOMPDIFF
    ;
    

DROP TABLE lexis_ba;
CREATE TABLE lexis_ba
SELECT 
    ANOBITO,
    MAKEDATE(ANOBITO, 365 * IF((ANOBITO - COORTE) - ANOSCOMPDIFF, 1/4, 3/4)) ANOCORR,
    COORTE,
    ANOSCOMPDIFF,
    IF((ANOBITO - COORTE) - ANOSCOMPDIFF, ANOSCOMPDIFF + 0.75, ANOSCOMPDIFF + 0.25) ANOSCORR,
    COUNT(*) `COUNT`
	FROM LEXISBA
	WHERE ANOSCOMPDIFF BETWEEN 0 AND 5
	GROUP BY ANOBITO, COORTE, ANOSCOMPDIFF
	ORDER BY  ANOBITO, COORTE, ANOSCOMPDIFF
    ;
    
SELECT COUNT(*)  FROM lexis_ba; 

DROP TABLE lexis_rn;
CREATE TABLE lexis_rn
SELECT 
    ANOBITO,
    MAKEDATE(ANOBITO, 365 * IF((ANOBITO - COORTE) - ANOSCOMPDIFF, 1/4, 3/4)) ANOCORR,
    COORTE,
    ANOSCOMPDIFF,
    IF((ANOBITO - COORTE) - ANOSCOMPDIFF, ANOSCOMPDIFF + 0.75, ANOSCOMPDIFF + 0.25) ANOSCORR,
    COUNT(*) `COUNT`
	FROM LEXISRN
	-- WHERE ANOSCOMPDIFF BETWEEN 0 AND 5
	GROUP BY ANOBITO, COORTE, ANOSCOMPDIFF
	ORDER BY  ANOBITO, COORTE, ANOSCOMPDIFF
    ;

SELECT 
	ANOORIGEM,
	COUNT(*) TOTAL,
	SUM(IF(FUNC_IS_VALID_DATE(DTOBITO), 0, 1)) INVALIDOBITO,
	SUM(IF(FUNC_IS_VALID_DATE(DTNASC), 0, 1)) INVALIDNASC,
    SUM(IF(FUNC_IS_VALID_IDADE(IDADE), 0, 1)) INVALIDIDADE
    FROM aux_dorn
		GROUP BY ANOORIGEM;


SELECT 
	ANOORIGEM,
	COUNT(*) TOTAL,
	SUM(IF(FUNC_IS_VALID_DATE(DTOBITO), 0, 1)) INVALIDOBITO,
	SUM(IF(FUNC_IS_VALID_DATE(DTNASC), 0, 1)) INVALIDNASC,
    SUM(IF(FUNC_IS_VALID_IDADE(IDADE), 0, 1)) INVALIDIDADE
    FROM aux_doba
		GROUP BY ANOORIGEM;
        
        
SELECT * FROM dnrn2020;

SELECT COUNT(*) 
	FROM lexis_rn
    WHERE COORTE BETWEEN 2000 AND 2016;

    
-- DROP TABLE IF EXISTS aux_dnrn_count;
-- CREATE TABLE aux_dnrn_count 

SELECT 
    MAKEDATE(ANORIGEM, IF (ANORIGEM % 4 = 0, 1, 0) + 182) ANOCORR, COUNT(*) CONT 
    FROM aux_dnrn 
    GROUP BY ANORIGEM;


DROP TABLE IF EXISTS aux_dnba_count;
CREATE TABLE aux_dnba_count
SELECT 
    MAKEDATE(ANORIGEM, IF (ANORIGEM % 4 = 0, 1, 0) + 182) ANOCORR, 
    COUNT(*) CONT 
    FROM aux_dnba 
    GROUP BY ANORIGEM;
    

SELECT `index`, ANOORIGEM, CONT, DATANASC, DATAOBITO, IDADE, DATADIFF, IDADECONVERT 
	FROM aux_dtba 
	WHERE ANOORIGEM = 2010;

CREATE  TABLE aux_ano_pessoa_vividos_ba
SELECT * FROM aux_dtba WHERE `index` NOT IN (
	SELECT `index`
		FROM aux_dtba
		WHERE 
			(ANOORIGEM = 2010 OR ANOORIGEM = 2019 OR ANOORIGEM = 2021)
			AND
			NOT FUNC_IS_VALID_DATE(DTNASC) AND NOT FUNC_IS_VALID_IDADE(IDADE))
        ;

SELECT 
	`aux_ano_pessoa_vividos_ba`.* , 
    IF((IDADECONVERT - FLOOR(IDADECONVERT)) > 0, IDADECONVERT, DATADIFF) TEMPOVIVIDO
    FROM aux_ano_pessoa_vividos_ba 
    WHERE ANOORIGEM IN (2010, 2019, 2021)
    HAVING TEMPOVIVIDO IS NOT NULL
    ;


DROP TABLE life_table;
CREATE TABLE life_table
SELECT 
	`index`,
	ANOORIGEM,
    CONT,
	TEMPOVIVIDO,
    CASE
		WHEN TEMPOVIVIDO < 1 THEN 0
        WHEN TEMPOVIVIDO < 4 THEN 1
        WHEN TEMPOVIVIDO < 90 THEN (FLOOR(TEMPOVIVIDO) DIV 5) * 5
        ELSE 90  
	END x ,
    CASE
		WHEN TEMPOVIVIDO < 1 THEN 1
        WHEN TEMPOVIVIDO < 4 THEN 4
        WHEN TEMPOVIVIDO < 90 THEN 5
        ELSE null  
	END n 
	FROM aux_tempo_vivido
;

SELECT *,
	TEMPOVIVIDO - x nkx
	FROM life_table
    WHERE x = 20
    ;
    
SELECT ANOORIGEM, x, COUNT(*)
	FROM life_table
    GROUP BY ANOORIGEM, x;
    
    
SELECT DISTINCT ANOORIGEM FROM aux_tempo_vivido;
SELECT DISTINCT x, n
	FROM life_table;
    
DROP TABLE life_table_raw;
CREATE TABLE life_table_raw
SELECT `index`, ANOORIGEM, CONT,
	TEMPOVIVIDO, 
    TEMPOVIVIDO - FLOOR(TEMPOVIVIDO) TEMPVIVIDOINTERVALO,
	IF ( TEMPOVIVIDO < 90, FLOOR(TEMPOVIVIDO), 90) x,
    IF ( TEMPOVIVIDO < 90, 1, NULL) n
    FROM aux_tempo_vivido
    ;

DROP TABLE death_table;
CREATE TABLE death_table
SELECT ANOORIGEM, 
	x, 
	n, 
	COUNT(*) CONTMORTES,
    SUM(TEMPVIVIDOINTERVALO) / COUNT(*) nkx
    FROM life_table_raw
    GROUP BY x, ANOORIGEM, n
    ORDER BY ANOORIGEM;
    
DROP TABLE life_table;
CREATE TABLE life_table
SELECT 
	death_table.ANOORIGEM, 
	death_table.x, 
	death_table.n, 
    death_table.nkx,
	death_table.CONTMORTES,
    populacao_ba.POPULACAO
	FROM death_table
    INNER JOIN populacao_ba ON death_table.ANOORIGEM = populacao_ba.ANOORIGEM AND death_table.x = populacao_ba.IDADEEXATA;

ALTER TABLE `demog`.`life_table` ADD COLUMN `nMx` 	DOUBLE NULL AFTER `POPULACAO`;
ALTER TABLE `demog`.`life_table` ADD COLUMN `nqx` 	DOUBLE NULL AFTER `nMx`;
ALTER TABLE `demog`.`life_table` ADD COLUMN `lx` 	DOUBLE NULL AFTER `nqx`;
ALTER TABLE `demog`.`life_table` ADD COLUMN `ndx` 	DOUBLE NULL AFTER `lx`;


UPDATE life_table 
	SET lx = IF (x = 0, 100000, NULL);

UPDATE life_table 
	SET nMx = CONTMORTES / POPULACAO;
    
SELECT * FROM life_table;

UPDATE life_table 
	SET nqx = (n * nMx) / (1 + ((n - nkx) * nMx));    
UPDATE life_table 
	SET nqx = 1
    WHERE nqx IS NULL;

SELECT ANOORIGEM, SUM(nqx) 
	FROM life_table
    GROUP BY ANOORIGEM;
   
DROP TABLE lf_test;
CREATE TABLE lf_test 
SELECT * FROM life_table;

SELECT * FROM aux_ano_pessoa_vividos_ba;
SELECT *, 
	CASE
		WHEN TEMPOVIVIDO < 1 THEN 0
        WHEN TEMPOVIVIDO < 4 THEN 1
        WHEN TEMPOVIVIDO < 90 THEN (FLOOR(TEMPOVIVIDO) DIV 5) * 5
        ELSE 90  
	END x ,
    CASE
		WHEN TEMPOVIVIDO < 1 THEN 1
        WHEN TEMPOVIVIDO < 4 THEN 4
        WHEN TEMPOVIVIDO < 90 THEN 5
        ELSE null  
	END n
    FROM aux_dtba;
    
SELECT * FROM aux_dtba;
SELECT `aux_dtba`.*, doba2000.SEXO 
	FROM aux_dtba 
    INNER JOIN doba2000
    ON `aux_dtba`.`index` = doba2000.`index` AND `aux_dtba`.ANOORIGEM = 2000;
    
DROP TABLE aux_doba;
DROP table aux_dorn;
CREATE TABLE aux_dorn LIKE aux_doba;
CALL PROC_AUX_DO('rn');
SELECT * FROM aux_dtba;
SELECT * FROM aux_dtrn;

CREATE TABLE `aux_doba` (
  `index` int NOT NULL AUTO_INCREMENT,
  `DTOBITO` text,
  `DTNASC` text,
  `IDADE` text,
  `ANOORIGEM` int NOT NULL,
  `CONT` int NOT NULL,
  `SEXO` int DEFAULT NULL,
  PRIMARY KEY (`index`),
  UNIQUE KEY `uc_origem_cont` (`ANOORIGEM`,`CONT`)
  );
  
  
        
-- life table
CREATE TABLE aux_tempo_vivido_ba
SELECT 
	`aux_dtba`.* , 
    IF((IDADECONVERT - FLOOR(IDADECONVERT)) > 0, IDADECONVERT, DATADIFF) TEMPOVIVIDO
    FROM aux_dtba
    WHERE ANOORIGEM IN (2010, 2019, 2021)
    HAVING TEMPOVIVIDO IS NOT NULL
    ;


SELECT *, 
	CASE
		WHEN TEMPOVIVIDO < 1 THEN 0
        WHEN TEMPOVIVIDO < 4 THEN 1
        WHEN TEMPOVIVIDO < 90 THEN (FLOOR(TEMPOVIVIDO) DIV 5) * 5
        ELSE 90  
	END x ,
    CASE
		WHEN TEMPOVIVIDO < 1 THEN 1
        WHEN TEMPOVIVIDO < 4 THEN 4
        WHEN TEMPOVIVIDO < 90 THEN 5
        ELSE null  
	END n
    FROM aux_tempo_vivido_ba;

SELECT aux.*, 
	CASE
		WHEN aux.TEMPOVIVIDO < 1 THEN 0
        WHEN aux.TEMPOVIVIDO < 4 THEN 1
        WHEN aux.TEMPOVIVIDO < 90 THEN (FLOOR(aux.TEMPOVIVIDO) DIV 5) * 5
        ELSE 90  
	END x ,
    CASE
		WHEN aux.TEMPOVIVIDO < 1 THEN 1
        WHEN aux.TEMPOVIVIDO < 4 THEN 4
        WHEN aux.TEMPOVIVIDO < 90 THEN 5
        ELSE null  
	END n
    FROM (SELECT 
	`aux_dtba`.* , 
    IF((IDADECONVERT - FLOOR(IDADECONVERT)) > 0, IDADECONVERT, DATADIFF) TEMPOVIVIDO
    FROM aux_dtba
    WHERE ANOORIGEM IN (2010, 2019, 2021)
    HAVING TEMPOVIVIDO IS NOT NULL) aux;



SELECT * FROM populacao_ba;

